#!/bin/bash
#
# Transposes a file and writes it to standard out, optionally removing a header.
#
# Copyright (c) 2012-2014 Matthias Cuntz - mc (at) macu (dot) de
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
set -e
#
prog=$0
pprog=$(basename ${prog})
dprog=$(dirname ${prog})
isdir=${PWD}
pid=$$
#
# ------------------------------------------------------------------------------------------------------------------------------------
function usage () {
    printf "${pprog} [-ch] [-d delim] [-s skip] infile\n"
    printf "Transposes a file and writes it to standard out, optionally removing a header.\n"
    printf "\n"
    printf "Input\n"
    printf "    infile      File to transpose.\n"
    printf "\n"
    printf "Options\n"
    printf "    -c          Use character columns instead of fields.\n"
    printf "    -d delim    Use delim as the field delimiter character in awk instead of blanks.\n"
    printf "    -h          Prints this help screen.\n"
    printf "    -s skip     # of header lines to skip at the beginning of infile.\n"
    printf "\n"
    printf "Example\n"
    printf "    ${pprog} -s 1 -d ',' -c infile > outfile\n"
    printf "\n"
    printf "Copyright (c) 2012-2014 Matthias Cuntz - mc (at) macu (dot) de\n"
}
# ------------------------------------------------------------------------------------------------------------------------------------
# Start
#
# switches
char=0
delim=""
skip=0
while getopts "cd:hs:" Option ; do
    case ${Option} in
        c) char=1;;
        d) delim="${OPTARG}";;
        h) usage; exit;;
        s) skip="${OPTARG}";;
        *) printf "Error ${pprog}: unimplemented option.\n\n" 1>&2;  usage 1>&2; exit 1;;
    esac
done
shift $((${OPTIND} - 1))
#
# Check args
if [[ $# -lt 1 ]] ; then 
    printf "Error ${pprog}: input file missing.\n\n" 1>&2
    usage 1>&2
    exit 1
fi
if [[ $# -gt 1 ]] ; then 
    printf "Error ${pprog}: too much input.\n\n" 1>&2
    usage 1>&2
    exit 1
fi
#
# Get infile
infile="$1"
#
# Check files
if [[ ! -f ${infile} ]] ; then
    printf "Error ${pprog}: input file does not exist.\n\n" 1>&2
    usage 1>&2
    exit 1
fi
#
# Write out each column
if [[ ${char} -eq 1 ]] ; then
    # Count number of characters
    ncol=$(awk -F "\000" '{if(max=="") max=NF; if(NF>max) {max=NF}} END {print max}' ${infile})
    for ((i=1; i<=${ncol}; i++)) ; do
        k='$'${i}
        if [[ ${skip} -gt 0 ]] ; then
            echo $(sed -e 1,${skip}d ${infile} | awk -F "\000" "{print ${k}}")
        else
            echo $(awk -F "\000" "{print ${k}}" ${infile})
        fi
    done
else
    # Count number of fields
    if [[ "z${delim}" == "z" ]] ; then
        ncol=$(tr [:blank:] ' ' < ${infile} | tr -s ' ' | awk -F " " '{if(max=="") max=NF; if(NF>max) {max=NF}} END {print max}')
        for ((i=1; i<=${ncol}; i++)) ; do
            k='$'${i}
            if [[ ${skip} -gt 0 ]] ; then
                echo $(sed -e 1,${skip}d ${infile} | awk "{print ${k}}")
            else
                echo $(awk "{print ${k}}" ${infile})
            fi
        done
    else
        ncol=$(awk -F ${delim} '{if(max=="") max=NF; if(NF>max) {max=NF}} END {print max}' ${infile})
        for ((i=1; i<=${ncol}; i++)) ; do
            k='$'${i}
            if [[ ${skip} -gt 0 ]] ; then
                echo $(sed -e 1,${skip}d ${infile} | awk -F ${delim} "{print ${k}}")
            else
                echo $(awk -F ${delim} "{print ${k}}" ${infile})
            fi
        done
    fi
fi

exit 0
