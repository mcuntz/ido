#!/usr/bin/env bash
#
# Splits pdf or postscript file into files with individual pages using ghostscript.
#
# Copyright (c) 2012-2013 Matthias Cuntz - mc (at) macu (dot) de
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# History
# Written  Matthias Cuntz, Nov 2012
# Modified Matthias Cuntz, Jan 2013 - removed . before number in output filename
#
set -e
prog=${0}
pprog=$(basename ${prog})
dprog=$(dirname ${prog})
isdir=${PWD}
pid=$$

if [ ! -f ${dprog}/pdfsplit ] ; then 
    cd ${dprog}
    ln -s pssplit pdfsplit
    cd ${isdir}
fi

# usage
usage ()
{
    printf "   ${pprog} [-hps] infile [outbase]\n"
    printf "   Splits pdf or postscript file into files with individual pages using ghostscript.\n"
    printf "\n"
    printf "      infile   input postscript file\n"
    printf "      outbase  output filenames will be outbase#.(ps|pdf).\n"
    printf "               Default: input file name (without infile .ending)#.(ps|pdf)\n"
    printf "      -h       Prints this help screen.\n"
    printf "      -p       Output is pdf, independent of calling name.\n"
    printf "      -s       Output is postscript, independent of calling name.\n"
    printf "\n"
    printf "Examples\n"
    printf "    pssplit -p in.ps pages_\n"
    printf "    pdfsplit in.pdf pages_\n"
    printf "\n"
    printf "Copyright (c) 2012-2013 Matthias Cuntz - mc (at) macu (dot) de\n"
}

# options
if [ "${pprog}" = "pssplit" ] ; then
    device="pswrite"
else
    device="pdfwrite"
fi
while getopts "hps" Option ; do
    case ${Option} in
	h) usage 1>&2; exit 2;;
	p) device="pdfwrite";;
	s) device="pswrite";;
	*) printf "Error ${pprog}: unimplemented option.\n\n";  usage 1>&2; exit 2;;
    esac
done
shift $((${OPTIND} - 1))

NO_ARGS=0
if [ $# -le "${NO_ARGS}" ] ; then 
    printf "Error ${pprog}: input file missing.\n\n"
    usage 1>&2
    exit 2
fi
TOO_MANY_ARGS=3
if [ $# -ge "${TOO_MANY_ARGS}" ] ; then 
    printf "Error ${pprog}: too many arguments.\n\n"
    usage 1>&2
    exit 2
fi

# arguments
infile=${1}
if [ $# -eq 1 ] ; then
    outbase=${infile%\.*}
elif [ $# -eq 2 ] ; then
    outbase=${2}
else
    printf "Unknown error ${pprog}.\n\n"
    usage 1>&2
    exit 2
fi

# pages
p1=`yes | gs -q -dBATCH -sDEVICE=nullpage ${infile} | grep -c showpage`
p2=`gs -q -dNOPAUSE -dBATCH -sDEVICE=bbox ${infile} 2>&1 | grep -c HiResBoundingBox`
if [ ${p1} -ne ${p2} ] ; then
    printf "Error ${pprog}: Two page counts got different results. Check file.\n"
    exit 1
fi

# extract
num=${#p1}
i=1
if [ "${device}" = "pdfwrite" ] ; then
    opt="-dAutoFilterColorImages=false -dColorImageFilter=/FlateEncode"
    outend='pdf'
else
    opt=""
    outend='ps'
fi
while [ ${i} -le ${p1} ] ; do
    onum=$(printf "%0${num}i" ${i})
    gs -q -dSAFER -dNOPAUSE -dBATCH -sDEVICE=${device} -dFirstPage=${i} -dLastPage=${i} \
	-sOutputFile=${outbase}${onum}.${outend} -f ${infile}
    (( i++ ))
done

exit 0
